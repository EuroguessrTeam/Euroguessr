@model Eurogessr.Models.Index.IndexModel

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
        
    <div style="visibility: hidden;">
        <iframe id="soundcloudPlayer" height="0" scrolling="no" frameborder="no" allow="autoplay"
                src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/857536786&auto_play=false"></iframe>
    </div>
        
    <div class="col" style="margin-left: 5%;margin-right: 5%;">

        <div class="row">
            <div class="col div-center">
                <hr>
            </div>
        </div>

        <div class="row">
            <div class="col div-center column-half">
                <h2>Step 1 : Listen to the song</h2>
            </div>
            <div class="col-md-4 div-center column-half">

                <div id="textLoadingSong">Song is loading... This usually takes less than a few seconds.<br />If the song takes too long to load, try reloading the page.</div>

                <div data-video="@Model.YoutubeVideo.VideoId" data-autoplay="0" data-loop="0" id="youtube-audio"></div>

                <!-- OLD : Soundcloud Player
                <button id="playButton" style="all: unset; cursor: pointer;" disabled>
                <i id="iconPlayOrPause" class="fas fa-sync" style="font-size: 30px;text-align: center;padding-right: 20px;"></i>
                    <small id="songPlayerText" style="font-size: 20px;">Song is loading...</small>
                </button>
                -->

            </div>
        </div>

        <div class="row">
            <div class="col div-center">
                <hr>
            </div>
        </div>

        <form method="post" action="/FormManager/OnFormSubmit">

            <div class="row">
                <div class="col div-center column-half">
                    <h2>Step 2 : Enter your prompt</h2>
                </div>

                <div class="col-sm-1 div-center column-half">
                    
                        <input type="text" name="selectedSong" list="optionsList" placeholder="Type song name/artist..." style="max-width: 100%;border-style: solid;" />
                        <datalist id="optionsList">
                            @foreach (var music in Model.SongsList)
                            {
                                <option>@music.DisplayName</option>
                            }
                        </datalist>
                </div>
            </div>

            <div class="row">
                <div class="col div-center">
                    <hr>
                </div>
            </div>

            <div class="row">
                <div class="col div-center">
                    <h2>Step 3 : Send your prompt</h2>
                </div>
                @{
                    bool isDisabled = Model.userData.IsWin;
                    string disabledAttribute = isDisabled ? "disabled" : "";
                }
                <div class="col div-center column-half"><button class="btn btn-primary" type="submit" @disabledAttribute>Send</button></div>
            </div>
        </form>

        <div class="row">
            <div class="col div-center">
                <hr>
            </div>
        </div>

        <div>

            <!-- Display countdown and youtube video if user won -->
            @{
                string hiddenAttribute = Model.userData.IsWin ? "" : "visibility: hidden;";
                string width = Model.userData.IsWin ? "560" : "0";
                string height = Model.userData.IsWin ? "315" : "0";
            }

            <iframe style="@hiddenAttribute" width="@width" height="@height" src="https://www.youtube.com/embed/@Model.YoutubeVideo.VideoId" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

            <h3>
                @Model.userData.DisplayMessage
            </h3>

            <div style="@hiddenAttribute">
                Next song in :
                <span id="countdown"></span>
            </div>
        </div>

        <!--
        <script src="https://cdn.rawgit.com/labnol/files/master/yt.js"></script>
        <script>
            /*
             YouTube Audio Embed
             --------------------

             Author: Amit Agarwal
             Web: http://www.labnol.org/?p=26740
            */
         -->
            
        <script src="https://www.youtube.com/iframe_api"></script>
        <script>

            function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }
            
            function onYouTubeIframeAPIReady() {

                console.log("!! READY !!");

                //await sleep(500);

                document.getElementById("textLoadingSong").innerHTML = "";

                var ctrlq = document.getElementById("youtube-audio");

                var icon = document.createElement("i");
                icon.setAttribute("class", "fas fa-play");
                icon.setAttribute("id", "youtube-icon");
                icon.style.cssText = "cursor:pointer;cursor:hand;font-size:30px";
                ctrlq.appendChild(icon);

                var div = document.createElement("div");
                div.setAttribute("id", "youtube-player");
                ctrlq.appendChild(div);

                var toggleButton = function (play) {
                    var img = play ? "fas fa-stop" : "fas fa-play";
                    icon.setAttribute("class", img);
                }

                ctrlq.onclick = function () {
                    if (player.getPlayerState() === YT.PlayerState.PLAYING
                        || player.getPlayerState() === YT.PlayerState.BUFFERING ) {
                        player.pauseVideo();
                        toggleButton(false);
                    } else {
                        player.seekTo(@Model.YoutubeVideo.SeekTo);
                        player.playVideo();
                        toggleButton(true);
                    }
                };

                var player = new YT.Player('youtube-player', {
                    height: "0",
                    width: "0",
                    videoId: ctrlq.dataset.video,
                    playerVars: {
                        autoplay: ctrlq.dataset.autoplay,
                        loop: ctrlq.dataset.loop,
                    },
                    events: {
                        onReady: function (e) {
                            player.setPlaybackQuality("small");
                            toggleButton(player.getPlayerState() !== YT.PlayerState.CUED);
                        },
                        onStateChange: function (e) {
                            if (e.data === YT.PlayerState.ENDED) {
                                toggleButton(false);
                            }
                        }
                    }
                });

            }
            

        </script>

    </div>
</div>


<!-- Script for SoundCloud player (OLD)
<script>
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    const iframeElement = document.getElementById("soundcloudPlayer");
    const widget = SC.Widget(iframeElement);
    const playButton = document.getElementById("playButton");
    const iconPlayOrPause = document.getElementById("iconPlayOrPause");
    const songPlayerText = document.getElementById("songPlayerText");
        
    let isPlaying = false;

    widget.bind(SC.Widget.Events.READY, allowPlay);
    widget.bind(SC.Widget.Events.FINISH, showButtonSongPlay);

    async function allowPlay() {
        await sleep(2000);
        playButton.removeAttribute("disabled");
        showButtonSongPlay();
    }

    playButton.addEventListener('click', function () {

        if (isPlaying) {
            widget.pause();
            showButtonSongPlay();
        }
        else {
            widget.seekTo(0);
            widget.play();
            showButtonSongPause();
        }
    });

    function showButtonSongPlay() {
        isPlaying = false;
        iconPlayOrPause.setAttribute("class", "fas fa-play");
        songPlayerText.textContent = "Play the song";
    }

    function showButtonSongPause() {
        isPlaying = true;
        iconPlayOrPause.setAttribute("class", "fas fa-stop");
        songPlayerText.textContent = "Stop the song";
    }
</script>
 -->


<!-- Script for countdown before 00:00 UTC -->
<script>
    function updateCountdown() {

        let now = new Date();

        let nowUTC = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds()); // Heure actuelle UTC
        let midnightUTC = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() + 1, 0, 0, 0); // Prochain minuit UTC

        let timeRemaining = midnightUTC - nowUTC;

        let hours = Math.floor((timeRemaining / (1000 * 60 * 60)) % 24);
        let minutes = Math.floor((timeRemaining / (1000 * 60)) % 60);
        let seconds = Math.floor((timeRemaining / 1000) % 60);

        // Formatage de l'affichage du chronomètre
        let formattedTime = hours.toString().padStart(2, '0') + ":" +
            minutes.toString().padStart(2, '0') + ":" +
            seconds.toString().padStart(2, '0');

        // Mise à jour de l'affichage dans l'élément avec l'identifiant 'countdown'
        document.getElementById("countdown").textContent = formattedTime;
    }

    // Appel initial pour mettre à jour l'affichage du chronomètre
    updateCountdown();

    // Appel régulier pour mettre à jour l'affichage toutes les secondes
    setInterval(updateCountdown, 1000);
</script>